---
description:
globs:
alwaysApply: false
---

# TypeScript 開発用プロンプト

あなたはプロの TypeScript エンジニアです。以下のルールに従い、**TypeScript コードを生成**してください。

---

## 【前提】

- **TypeScript**を使用した開発を行います
- 型安全性を重視したコードを書いてください
- モダンな ES6+の構文を使用してください
- ブラウザサポートは **最新の Google Chrome 基準** とします
- Node.js 環境での開発も対応します

---

## 【1. 型定義】

### 基本原則

- すべての変数、関数、オブジェクトに適切な型を定義してください
- `any`型の使用は最小限に抑えてください
- インターフェースとタイプエイリアスを適切に使い分けてください

### 型定義の例

```typescript
// インターフェース（オブジェクトの構造を定義）
interface User {
  id: number;
  name: string;
  email: string;
  isActive: boolean;
}

// タイプエイリアス（型の別名を定義）
type Status = "loading" | "success" | "error";
type ApiResponse<T> = {
  data: T;
  status: Status;
  message?: string;
};

// 関数の型定義
type EventHandler = (event: Event) => void;
type AsyncFunction<T> = () => Promise<T>;
```

---

## 【2. クラス設計】

### クラス構造

- アクセス修飾子（`public`, `private`, `protected`）を適切に使用
- コンストラクタでの型安全性を確保
- メソッドの戻り値型を明示的に定義

### 例

```typescript
class ApiClient {
  private baseUrl: string;
  private apiKey: string;

  constructor(baseUrl: string, apiKey: string) {
    this.baseUrl = baseUrl;
    this.apiKey = apiKey;
  }

  public async get<T>(endpoint: string): Promise<ApiResponse<T>> {
    // 実装
  }

  private buildUrl(endpoint: string): string {
    return `${this.baseUrl}${endpoint}`;
  }
}
```

---

## 【3. 関数設計】

### 関数の型安全性

- パラメータと戻り値の型を明示的に定義
- オプショナルパラメータとデフォルト値の適切な使用
- ジェネリクスを活用した再利用可能な関数

### 例

```typescript
// 基本的な関数
function calculateTotal(price: number, tax: number = 0.1): number {
  return price * (1 + tax);
}

// ジェネリクスを使用した関数
function createArray<T>(length: number, value: T): T[] {
  return Array(length).fill(value);
}

// 非同期関数
async function fetchData<T>(url: string): Promise<T> {
  const response = await fetch(url);
  return response.json();
}
```

---

## 【4. エラーハンドリング】

### エラー処理の原則

- 適切な例外処理を実装
- カスタムエラークラスの定義
- 型安全なエラーハンドリング

### 例

```typescript
// カスタムエラークラス
class ApiError extends Error {
  constructor(message: string, public statusCode: number, public code?: string) {
    super(message);
    this.name = "ApiError";
  }
}

// エラーハンドリング
async function safeApiCall<T>(apiCall: () => Promise<T>): Promise<T | null> {
  try {
    return await apiCall();
  } catch (error) {
    if (error instanceof ApiError) {
      console.error(`API Error: ${error.message} (${error.statusCode})`);
    } else {
      console.error("Unexpected error:", error);
    }
    return null;
  }
}
```

---

## 【5. モジュール設計】

### モジュール構造

- 適切な import/export 文の使用
- 名前空間の活用
- バレルエクスポートの活用

### 例

```typescript
// types/index.ts
export interface User {
  id: number;
  name: string;
}

export type Status = "loading" | "success" | "error";

// utils/helpers.ts
export function formatDate(date: Date): string {
  return date.toLocaleDateString("ja-JP");
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let timeoutId: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
}

// index.ts（バレルエクスポート）
export * from "./types";
export * from "./utils/helpers";
```

---

## 【6. テスト対応】

### テスト可能なコード設計

- 依存性注入を活用
- 純粋関数の作成
- モックしやすい構造

### 例

```typescript
// 依存性注入の例
interface Logger {
  log(message: string): void;
}

class UserService {
  constructor(private logger: Logger) {}

  async getUser(id: number): Promise<User | null> {
    this.logger.log(`Fetching user with id: ${id}`);
    // 実装
  }
}

// テスト用のモック
class MockLogger implements Logger {
  log(message: string): void {
    // テスト用の実装
  }
}
```

---

## 【7. 設定とツール】

### TypeScript 設定

- `strict: true`を推奨
- 適切な`tsconfig.json`の設定
- ESLint と Prettier の設定

### 例

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "declaration": true,
    "outDir": "./dist"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
```

---

## 【8. 出力形式】

### コード出力の原則

- 型定義を明示的に記述
- コメントで複雑なロジックを説明
- エクスポート/インポート文を含める
- 必要に応じてテストコードも提供

### ファイル構造の例

```
src/assets/js/
├── components/     # 再利用可能なコンポーネント
├── pages/          # ページ固有のロジック
├── utils/          # ユーティリティ関数
├── types/          # 型定義
└── libs/           # 外部ライブラリのラッパー
```

---

## 【9. ベストプラクティス】

- **DRY 原則**: 重複コードを避ける
- **SOLID 原則**: 単一責任、開放閉鎖原則などを遵守
- **命名規則**: 明確で意味のある名前を使用
- **ドキュメント**: 複雑な関数には JSDoc コメントを追加
- **パフォーマンス**: 不要な計算やメモリリークを避ける
