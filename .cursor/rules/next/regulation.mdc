---
description:
globs:
alwaysApply: false
---

# Next.js コーディングレギュレーション

あなたはプロの Next.js エンジニアです。以下のルールに従い、**Next.js 14 以降、TypeScript、Tailwind CSS、shadcn/ui**を使用した開発を行ってください。

---

## 【前提】

- **Next.js 14 以降**を使用
- **TypeScript**を必須とする
- **Tailwind CSS**でスタイリング
- **shadcn/ui**でコンポーネント作成
- **App Router**を使用
- ブラウザサポートは **最新の Google Chrome 基準** とします
- **デザイン画像が入力されている場合は、必ず `.cursor/rules/next/design-to-code.mdc` のルールを参照してください。**

---

## 【1. ディレクトリ構成】

参考サイト（https://zenn.dev/yutabeee/articles/0f7e8e2fa03946）に基づく構成：

```
my-next-app/
├── app/
│   ├── api/
│   │   └── [endpoint]/
│   │       └── route.ts
│   ├── components/
│   │   ├── ui/
│   │   │   ├── button.tsx
│   │   │   ├── card.tsx
│   │   │   └── [component].tsx
│   │   ├── layout/
│   │   │   ├── header.tsx
│   │   │   ├── footer.tsx
│   │   │   └── navigation.tsx
│   │   └── features/
│   │       └── [feature]/
│   │           └── [component].tsx
│   ├── hooks/
│   │   └── use-[hook-name].ts
│   ├── lib/
│   │   ├── db.ts
│   │   ├── utils.ts
│   │   └── validations.ts
│   ├── styles/
│   │   └── globals.css
│   ├── types/
│   │   └── index.ts
│   ├── (routes)/
│   │   ├── page.tsx
│   │   ├── layout.tsx
│   │   ├── loading.tsx
│   │   └── error.tsx
│   └── globals.css
├── public/
│   ├── images/
│   └── fonts/
├── components.json
├── tailwind.config.ts
├── tsconfig.json
├── next.config.ts
└── package.json
```

### ファイルの役割

#### ページ・レイアウト

- **`app/page.tsx`**: メインページコンポーネント
- **`app/layout.tsx`**: ルートレイアウト（共通ヘッダー・フッター）
- **`app/loading.tsx`**: ローディング状態
- **`app/error.tsx`**: エラー状態
- **`app/not-found.tsx`**: 404 ページ

#### コンポーネント

- **`app/components/ui/`**: shadcn/ui 基本コンポーネント（再利用可能）
- **`app/components/layout/`**: レイアウト関連コンポーネント
- **`app/components/features/`**: 機能別コンポーネント

#### ユーティリティ

- **`app/lib/utils.ts`**: 共通ユーティリティ関数
- **`app/lib/validations.ts`**: Zod スキーマ定義
- **`app/types/index.ts`**: 共通型定義

---

## 【2. TypeScript ルール】

### 型定義

- 全てのコンポーネントに型定義を付与
- `app/types/index.ts`で共通型を定義
- API レスポンス型は`zod`でバリデーション

```typescript
// 例：app/types/index.ts
export interface User {
  id: string;
  name: string;
  email: string;
}

export type ApiResponse<T> = {
  data: T;
  message: string;
  status: number;
};
```

### コンポーネント型定義

```typescript
interface ButtonProps {
  children: React.ReactNode;
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";
  size?: "default" | "sm" | "lg" | "icon";
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
}
```

---

## 【3. Tailwind CSS ルール】

### 基本原則

- **shadcn/ui**のデフォルトスタイルを基本とする
- カスタムスタイルは`@apply`を使用
- レスポンシブは`sm:`, `md:`, `lg:`, `xl:`を使用

### カスタムクラス定義

```css
/* app/globals.css */
@layer components {
  .btn-primary {
    @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors;
  }

  .card-container {
    @apply bg-white rounded-lg shadow-md p-6 border border-gray-200;
  }
}
```

### レスポンシブ対応

```typescript
// モバイルファースト
<div className="w-full md:w-1/2 lg:w-1/3">
  <h2 className="text-lg md:text-xl lg:text-2xl">タイトル</h2>
</div>
```

---

## 【4. shadcn/ui コンポーネントルール】

### 基本設定

- `components.json`で shadcn/ui を設定
- コンポーネントは`app/components/ui/`に配置
- カスタマイズは`cn()`関数を使用

### コンポーネント作成例

```typescript
// app/components/ui/custom-button.tsx
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ButtonProps } from "@/types";

export function CustomButton({ children, className, ...props }: ButtonProps) {
  return (
    <Button className={cn("bg-gradient-to-r from-blue-500 to-purple-600", className)} {...props}>
      {children}
    </Button>
  );
}
```

---

## 【5. ファイル命名規則】

### コンポーネント

- **PascalCase**: `UserProfile.tsx`, `ProductCard.tsx`
- **kebab-case**: `user-profile.tsx`, `product-card.tsx`（推奨）

### ページ・ルート

- **page.tsx**: ページコンポーネント
- **layout.tsx**: レイアウトコンポーネント
- **loading.tsx**: ローディング状態
- **error.tsx**: エラー状態
- **not-found.tsx**: 404 ページ

### フック・ユーティリティ

- **camelCase**: `useUserData.ts`, `formatDate.ts`
- **kebab-case**: `use-user-data.ts`, `format-date.ts`（推奨）

---

## 【6. コンポーネント設計】

### ディレクトリ構造

```
app/components/
├── ui/                    # shadcn/ui基本コンポーネント
│   ├── button.tsx
│   ├── card.tsx
│   └── input.tsx
├── layout/                # レイアウト関連
│   ├── header.tsx
│   ├── footer.tsx
│   └── sidebar.tsx
└── features/              # 機能別コンポーネント
    ├── auth/
    │   ├── login-form.tsx
    │   └── signup-form.tsx
    └── dashboard/
        ├── stats-card.tsx
        └── chart.tsx
```

### コンポーネント作成例

```typescript
// app/components/features/dashboard/stats-card.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon?: React.ReactNode;
  className?: string;
}

export function StatsCard({ title, value, description, icon, className }: StatsCardProps) {
  return (
    <Card className={cn("", className)}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        {icon}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {description && <p className="text-xs text-muted-foreground">{description}</p>}
      </CardContent>
    </Card>
  );
}
```

---

## 【7. API ルート設計】

### ファイル構造

```typescript
// app/api/users/route.ts
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const userSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
});

export async function GET() {
  try {
    // データ取得ロジック
    return NextResponse.json({ users: [] });
  } catch (error) {
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = userSchema.parse(body);

    // データ作成ロジック

    return NextResponse.json({ message: "User created successfully" }, { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Validation error", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
```

---

## 【8. 状態管理】

### 基本原則

- **Server Components**を優先使用
- クライアント状態は`useState`、`useReducer`
- グローバル状態は`zustand`または`jotai`
- サーバー状態は`React Query`（TanStack Query）

### 例：Zustand ストア

```typescript
// app/lib/stores/user-store.ts
import { create } from "zustand";

interface UserState {
  user: User | null;
  setUser: (user: User | null) => void;
  logout: () => void;
}

export const useUserStore = create<UserState>((set) => ({
  user: null,
  setUser: (user) => set({ user }),
  logout: () => set({ user: null }),
}));
```

---

## 【9. エラーハンドリング】

### エラーバウンダリ

```typescript
// app/error.tsx
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    console.error(error);
  }, [error]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold mb-4">エラーが発生しました</h2>
      <Button onClick={reset}>再試行</Button>
    </div>
  );
}
```

---

## 【10. パフォーマンス最適化】

### 画像最適化

```typescript
import Image from "next/image";

<Image
  src="/images/hero.jpg"
  alt="Hero image"
  width={1200}
  height={600}
  priority
  className="rounded-lg"
/>;
```

### 動的インポート

```typescript
import dynamic from "next/dynamic";

const DynamicChart = dynamic(() => import("@/components/chart"), {
  loading: () => <div>Loading...</div>,
  ssr: false,
});
```

---

## 【11. セキュリティ】

### 環境変数

```typescript
// .env.local
DATABASE_URL = "postgresql://...";
NEXTAUTH_SECRET = "your-secret";
NEXTAUTH_URL = "http://localhost:3000";
```

### 認証・認可

- **NextAuth.js**または**Clerk**を使用
- API ルートで認証チェック
- ミドルウェアでルート保護

---

## 【12. テスト】

### テストファイル配置

```
__tests__/
├── components/
│   └── ui/
├── pages/
└── utils/
```

### テスト例

```typescript
// __tests__/components/ui/button.test.tsx
import { render, screen } from "@testing-library/react";
import { Button } from "@/components/ui/button";

describe("Button", () => {
  it("renders correctly", () => {
    render(<Button>Click me</Button>);
    expect(screen.getByRole("button")).toBeInTheDocument();
  });
});
```

---

## 【13. 出力形式】

コード生成時は以下の形式で出力してください：

```typescript
// ファイル名: app/components/example.tsx
import { cn } from "@/lib/utils";

interface ExampleProps {
  // プロパティ定義
}

export function Example({ ... }: ExampleProps) {
  return (
    // JSX
  );
}
```

---

## 【14. 推奨ライブラリ】

### 必須

- `next` - Next.js
- `react` - React
- `typescript` - TypeScript
- `tailwindcss` - Tailwind CSS
- `@radix-ui/*` - shadcn/ui 基盤

### 推奨

- `zod` - スキーマバリデーション
- `zustand` - 状態管理
- `@tanstack/react-query` - サーバー状態管理
- `next-auth` - 認証
- `lucide-react` - アイコン
- `clsx` / `tailwind-merge` - クラス名管理

このレギュレーションに従い、保守性・可読性・パフォーマンスを重視した Next.js アプリケーションを開発してください。
