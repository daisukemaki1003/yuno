---
description:
globs:
alwaysApply: false
---

# デザイン画像からコード生成用プロンプト

あなたはプロの Next.js エンジニアです。**デザイン画像を分析し、忠実に Next.js、TypeScript、Tailwind CSS、shadcn/ui を使用したコードを生成**してください。

---

## 【前提】

- **このプロンプトは `.cursor/rules/next/regulation.mdc` から参照されることを前提としています。**
- **デザイン画像が入力されている場合のみこのプロンプトを使用してください。**
- 画像から色・フォント・スペーシング・レイアウトを正確に読み取り、再現してください。
- **Next.js 14 以降、TypeScript、Tailwind CSS、shadcn/ui**を使用
- **App Router**を使用
- ブラウザサポートは **最新の Google Chrome 基準** とします。

---

## 【1. 画像分析】

デザイン画像から以下の要素を正確に読み取ってください：

### レイアウト分析

- グリッドシステム（カラム数、ガター幅）
- コンテナ幅とマージン
- 要素間のスペーシング
- レスポンシブブレークポイント
- フレックスボックスまたはグリッドレイアウト

### デザイン要素分析

- **色**: 背景色、テキスト色、アクセントカラー、ボーダー色、グラデーション
- **タイポグラフィ**: フォントファミリー、フォントサイズ、行間、文字間隔、フォントウェイト
- **スペーシング**: マージン、パディング、要素間の距離
- **形状**: 角丸、シャドウ、ボーダー、グラデーション
- **画像**: サイズ、アスペクト比、配置、alt 属性
- **アイコン**: サイズ、色、配置

---

## 【2. ファイル構成設計】

デザインに基づいて適切なファイル構成を設計してください：

### ページ構成

```
app/
├── page.tsx                    # メインページ
├── layout.tsx                  # ルートレイアウト
├── globals.css                 # グローバルスタイル
└── components/
    ├── ui/                     # shadcn/ui基本コンポーネント
    │   ├── button.tsx
    │   ├── card.tsx
    │   └── [component].tsx
    ├── layout/                 # レイアウト関連
    │   ├── header.tsx
    │   ├── footer.tsx
    │   └── navigation.tsx
    └── features/               # 機能別コンポーネント
        └── [feature]/
            └── [component].tsx
```

### コンポーネント分割方針

- **再利用可能な要素**: `ui/`ディレクトリ
- **レイアウト要素**: `layout/`ディレクトリ
- **機能固有の要素**: `features/`ディレクトリ
- **セクション単位**: 独立したコンポーネントとして分離

---

## 【3. 忠実な再現】

### Tailwind CSS 設計

- **画像から読み取った色・余白・タイポグラフィ・角丸・シャドウを忠実に再現**
- カラーコードは正確に抽出（例：#FF6B35）
- フォントサイズは Tailwind クラスで指定
- スペーシングは正確な数値で指定

### shadcn/ui 活用

- 適切な shadcn/ui コンポーネントを選択
- カスタマイズは`cn()`関数を使用
- デザインに合わせてプロパティを調整

### レスポンシブ対応

- デザイン画像に SP 版がある場合は、それも分析して実装
- モバイルファーストで Tailwind のレスポンシブクラスを使用
- ブレークポイント: `sm:`, `md:`, `lg:`, `xl:`

---

## 【4. 出力形式】

### 分析結果

まず、デザイン画像から読み取った要素を箇条書きで出力してください：

```
## デザイン分析結果
- レイアウト: [分析結果]
- カラーパレット: [分析結果]
- タイポグラフィ: [分析結果]
- スペーシング: [分析結果]
- コンポーネント構成: [分析結果]
- その他: [分析結果]
```

### ファイル構成

```
## ファイル構成
- app/page.tsx: [役割説明]
- app/layout.tsx: [役割説明]
- app/components/ui/[component].tsx: [役割説明]
- app/components/layout/[component].tsx: [役割説明]
- app/components/features/[component].tsx: [役割説明]
```

### コード出力

各ファイルの役割を明確にし、以下の形式で出力：

```typescript
// ファイル名: app/components/example.tsx
// 役割: [このコンポーネントの役割と責任]

import { cn } from "@/lib/utils";
import { ComponentProps } from "@/types";

interface ExampleProps {
  // プロパティ定義（デザインから読み取った要素）
}

export function Example({ ... }: ExampleProps) {
  return (
    // JSX（デザインを忠実に再現）
  );
}
```

---

## 【5. 実装ガイドライン】

### コンポーネント設計

- **単一責任の原則**: 各コンポーネントは明確な役割を持つ
- **再利用性**: 汎用的なコンポーネントは`ui/`に配置
- **型安全性**: 全てのプロパティに型定義を付与

### スタイリング

- **Tailwind 優先**: 可能な限り Tailwind クラスを使用
- **カスタムスタイル**: 必要に応じて`@apply`を使用
- **一貫性**: デザインシステムに沿ったスタイリング

### アクセシビリティ

- **セマンティック HTML**: 適切な HTML 要素を使用
- **ARIA 属性**: 必要に応じてアクセシビリティ属性を追加
- **alt 属性**: 画像には適切な alt 属性を設定

---

## 【6. 品質チェック】

実装後、以下を確認してください：

### デザイン再現度

- [ ] 色・フォント・スペーシングが正確
- [ ] レイアウトが忠実に再現されている
- [ ] レスポンシブ対応が適切

### コード品質

- [ ] TypeScript の型定義が適切
- [ ] コンポーネントの責任が明確
- [ ] ファイル構成が論理的
- [ ] 命名規則に従っている

### パフォーマンス

- [ ] 不要な再レンダリングがない
- [ ] 画像最適化が適切
- [ ] バンドルサイズが最適化されている

---

## 【7. 出力例】

```
## デザイン分析結果
- レイアウト: ヘッダー、メインコンテンツ、フッターの3セクション構成
- カラーパレット: プライマリ#3B82F6、セカンダリ#64748B、背景#FFFFFF
- タイポグラフィ: 見出し24px bold、本文16px regular
- スペーシング: セクション間32px、要素間16px
- コンポーネント構成: Header、Hero、Features、Footer

## ファイル構成
- app/page.tsx: メインページの構成
- app/layout.tsx: 共通レイアウト
- app/components/layout/header.tsx: ヘッダーコンポーネント
- app/components/features/hero.tsx: ヒーローセクション
- app/components/features/features.tsx: 機能紹介セクション
- app/components/layout/footer.tsx: フッターコンポーネント

// 各ファイルのコード...
```

このプロンプトに従い、デザイン画像を忠実に再現した Next.js アプリケーションを実装してください。
